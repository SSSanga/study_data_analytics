
from selenium import webdriver
import time
import pandas as pd
# import pymongo as mg
from selenium.webdriver.support.ui import WebDriverWait

from selenium.webdriver.chrome.options import Options
import subprocess
import shutil

# 자신 맞는 chrome.exe 위치 변경 필요
subprocess.Popen(r'C:\Program Files\Google\Chrome\Application\chrome.exe --remote-debugging-port=9222 --user-data-dir="C:\chrometemp"')

options = webdriver.ChromeOptions()
options.add_experimental_option("debuggerAddress", "127.0.0.1:9222")
  # Experimental option as an argument

#open chrome browser
browser = webdriver.Chrome(executable_path='C:/Users/01-15/Develops/chromedriver.exe', options=options) #webdriver_selenium과 web을 연결해주기위함.
browser.set_window_size(1560,2000)

# url in address window
browser.get('https://search.11st.co.kr/pc/total-search?kwd=%25EB%2588%2588%25EA%25B0%259C%25EC%2584%25A0%2520%25EC%2598%2581%25EC%2596%2591%25EC%25A0%259C&tabId=TOTAL_SEARCH')
browser.implicitly_wait(10)


## 리뷰 많은 순 클릭
click_path='#layBodyWrap > div > div > div.l_search_content > div.search_content > div.c_search_sorting > div > div > div > div'
browser.find_element_by_css_selector(click_path).click()
select_category='div.c_search_sorting > div > div > div > ul > li:nth-child(5)'
browser.find_element_by_css_selector(select_category).click()


# 리뷰를 긁어오는 순서
# 1. 상품 페이지네이션이 돌아간다. 
    #2. 상품 클릭 loop가 돌아간다. 
        # 3. 리뷰 loop가 돌아간다. 
        # 리뷰 loop가 끝나면
    # 상품 클릭 loop가 끝난다. 
# 상품 클릭 loop가 끝나면 상품 페이지네이션이 진행된다.     
# 상품 페이지네이션이 끝난다. 
# # 만약 상품 클릭 loop가 돌아서 리뷰가 0이면 상품페이지네이션 끝. 

# 상품 클릭
# product_page = '#section_commonPrd > div.c-search-list > ul > li:nth-child(1)'
# product_info=browser.find_element_by_css_selector(product_page)
# product_info.click()

## pagination 하기
# 검색 결과 # div.search_content > div > p > span
product_total = browser.find_element_by_css_selector('div.search_content > div > p > span')
product_total_str = product_total.text
# 쉼표를 제거합니다.
product_total_del = product_total_str.replace(',', '')
product_total_count = int(product_total_del)

print(product_total_count) ## 검색 결과_숫자

product_standard_count_per = 60 ## 상품목록수

loop_count_int = int(product_total_count / product_standard_count_per) 
print(loop_count_int) ## 상품 총 페이지수 
## pagination은 1~10까지 정해져있음. 10까지 가면 next 버튼 눌러야함. 
## 이때, 버튼 CSS는 #section_commonPrd > nav > ul > li:nth-child({page}) > button 2~11번까지. 

# 현재 페이지 번호를 초기화합니다.
current_page = 1

# pagination 버튼을 끝까지 순환하면서 페이지 이동합니다.
while current_page <= loop_count_int:
    for i in range(1, 5):  # 1부터 60까지 순회합니다.
        try:
            product_page = f'#section_commonPrd > div.c-search-list > ul > li:nth-child({i}) > div > a'
            product = browser.find_element_by_css_selector(product_page)
            product.click()
            # 새로 열린 창으로 브라우저 컨텍스트를 전환합니다.
            browser.switch_to.window(browser.window_handles[-1]) 
            browser.implicitly_wait(2)
            ## -> browser.window_handles[-]하면 옆으로 쭉쭉 생기는건가봄. 
            # 현재 페이지를 닫습니다.
            browser.close()
            # 다음 상품을 클릭하기 전에 원래의 창으로 다시 전환합니다.
            browser.switch_to.window(browser.window_handles[0])
                        
        except:
            print(f'에러: {i}')
            pass
        # Pagination 버튼을 클릭합니다.
    current_page += 1
    page_button_css = f'#section_commonPrd > nav > ul > li:nth-child({current_page % 10 + 2}) > button'
    page_button = browser.find_element_by_css_selector(page_button_css)
    page_button.click()
    
    # 10번째 페이지일 경우 next 버튼 클릭
    if current_page % 10 == 0:
        next_button = browser.find_element_by_css_selector('#section_commonPrd > nav > ul > li.next > button')
        next_button.click()
    
    
# 페이지네이션 버튼 누르기
#     for button in range(2, 12):
#         try:
            
#             page_button = browser.find_element_by_css_selector(f'#section_commonPrd > nav > ul > li:nth-child({button}) > button')
#             page_button.click()
#             # browser.switch_to.window(browser.window_handles[0])
#             # pagination 버튼을 클릭합니다.
#             current_page += 1
#         except:
#             print('Unknown')
#             pass

    
#     # next 버튼을 누릅니다.
#     try:
#         next_button = browser.find_element_by_css_selector('#section_commonPrd > nav > ul > li.next > button')
#         next_button.click()
#     except:
#         print('Unknown')
#         break

# # 상품 클릭 loop
# click_path = '#section_commonPrd > div.c-search-list > ul > li'
# product_list = browser.find_elements_by_css_selector(click_path)
# # print(type(product_list[0]))
# count_product=len(product_list)
# print(count_product) ## 60개 확인. 

# for i in range(1, 11):  # 1부터 60까지 순회합니다.
#     try:
#         product_page = f'#section_commonPrd > div.c-search-list > ul > li:nth-child({i}) > div > a'
#         product = browser.find_element_by_css_selector(product_page)
#         product.click()
#         # 새로 열린 창으로 브라우저 컨텍스트를 전환합니다.
#         browser.switch_to.window(browser.window_handles[-1]) 
#         browser.implicitly_wait(2)
#         ## -> browser.window_handles[-]하면 옆으로 쭉쭉 생기는건가봄. 
#         # 현재 페이지를 닫습니다.
#         browser.close()
#         # 다음 상품을 클릭하기 전에 원래의 창으로 다시 전환합니다.
#         browser.switch_to.window(browser.window_handles[0])
                    
#     except:
#         print(f'에러: {i}')
#         pass


